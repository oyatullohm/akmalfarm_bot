from state import * 
from button import *
pharmacies_cache = None

async def send_main_menu_ru(message: Message, state: FSMContext, lang: str = 'uz'):

    text ="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    markup = inline_ru_text
    
    await message.answer(
        text,
        reply_markup=markup,
        parse_mode="Markdown"
    )
    await state.set_state(BotStates.menu_select_ru)

async def get_pharmacies():
    global pharmacies_cache
    if pharmacies_cache is None:
        import requests
        response = requests.get("https://akmalfarm.uz/api/apteka/")
        pharmacies_cache = response.json()
    return pharmacies_cache

@router.callback_query(lambda c: c.data.startswith(("dorihona_ru", "page_")))
async def send_pharmacies_list_ru(callback: CallbackQuery):
    pharmacies = await get_pharmacies()

    if callback.data == "dorihona_ru":
        page = 1
    else:
        page = int(callback.data.split("_")[1])
    
    items_per_page = 8
    total_pages = (len(pharmacies) + items_per_page - 1) // items_per_page
    start_index = (page - 1) * items_per_page
    end_index = start_index + items_per_page
    current_pharmacies = pharmacies[start_index:end_index]
    
    await callback.message.delete()
    
    for pharmacy in current_pharmacies:
        button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è", callback_data=f"loc_{pharmacy['id']}")]
        ])
        await callback.message.answer(f"üè• <b>{pharmacy['title']}</b>\n"
                                      f"üìç {pharmacy['address']}\n"
                                      f"üìû {pharmacy['phone_number']}"
                                      , reply_markup=button, parse_mode="HTML")

    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    
    pagination_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="current_page"))
    
    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
    
    pagination_markup = InlineKeyboardMarkup(inline_keyboard=[pagination_buttons])
    await callback.message.answer(
        "–°–ø–∏—Å–æ–∫ –∞–ø—Ç–µ–∫:",
        reply_markup=pagination_markup
    )
    
    await callback.answer()


@router.callback_query(lambda c: c.data == "dori_info_ru")
async def dori_info_ru(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:")
    await state.set_state(BotStates.dori_info_search_ru)
    await callback.answer()



@router.message(BotStates.dori_info_search_ru)
async def search_dori_ru(message: types.Message, state: FSMContext):
    dori_nomi = message.text.strip()
    
    response = requests.get(f'https://akmalfarm.uz/api/product/?search={dori_nomi}')

    if response.status_code == 200:
        data = response.json()
        if isinstance(data, list) and data:
            # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            for product in data[:5]:
                try:
                    name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    prices = product.get('prices', {})
                    price = prices.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞') if isinstance(prices, dict) else '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                    country = product.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    producer = product.get('producer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
 
                    product_type_info = product.get('product_type_display', {})
                    if isinstance(product_type_info, dict):
                        product_type_text = product_type_info.get('text', '–ë–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞')
                    else:
                        product_type_text = str(product_type_info)
                    
                    product_type_display = "üî¥ –ü–æ —Ä–µ—Ü–µ–ø—Ç—É" if "–†–µ—Ü–µ–ø—Ç" in product_type_text else "üü¢ –ë–µ–∑ —Ä–µ—Ü–µ–ø—Ç–∞"
                    
                    if isinstance(price, (int, float)):
                        price = f"{price:,} —Å—É–º".replace(",", " ")
                    
                    await message.answer(
                        f"<b>üîç {name}</b>\n\n"
                        f"üíä <i>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:</i> {producer}\n"
                        f"üåç <i>–°—Ç—Ä–∞–Ω–∞:</i> {country}\n"
                        f"üí∞ <i>–¶–µ–Ω–∞:</i> <b>{price}</b>\n"
                        f"üè∑Ô∏è <i>–¢–∏–ø:</i> {product_type_display}",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    continue
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_again_ru")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_ru")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_search_ru")]
            ])
            
            await message.answer(
                "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
            await state.set_state(BotStates.after_search_choice_ru)
            
        else:
            await message.answer("‚ùóÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_again_ru")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_ru")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_search_ru")]
            ])
            
            await message.answer(
                "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            await state.set_state(BotStates.after_search_choice_ru)
    else:
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_again_ru")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_ru")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_search_ru")]
            ])
            
        await message.answer(
            "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        await state.set_state(BotStates.after_search_choice_ru)


@router.callback_query(BotStates.after_search_choice_ru, lambda c: c.data in ["search_again_ru", "main_menu_ru", "close_search_ru"])
async def handle_search_actions_ru(callback: CallbackQuery, state: FSMContext):
    action = callback.data
    
    if action == "search_again_ru":
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:")
        await state.set_state(BotStates.dori_info_search_ru)
        
    elif action == "main_menu_ru":
        await callback.message.edit_reply_markup(reply_markup=None)
        await send_main_menu_ru(callback.message, state)
        
    elif action == "close_search_ru":
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /menu.")
        await state.clear()
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "aloqa_ru")
async def admin_start_ru(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(AdminPost.waiting_for_text_ru)
    await callback.answer()

@router.message(AdminPost.waiting_for_text_ru)
async def process_text_ru(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
        reply_markup=photo_choice_markup_ru
    )
    await state.set_state(AdminPost.photo_choice_ru)

@router.callback_query(AdminPost.photo_choice_ru, F.data == "add_photo_ru")
async def request_photo_ru(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:")
    await state.set_state(AdminPost.waiting_for_photo_ru)
    await callback.answer()

@router.callback_query(AdminPost.photo_choice_ru, F.data == "skip_photo_ru")
async def skip_photo_ru(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.edit_reply_markup(reply_markup=None)
    
    user_data = await state.get_data()
    text = user_data.get('text', '')
    
    # GROUP_ID = -4724451433 
    GROUP_ID = -1002524424597 
    user = callback.from_user
    username = f"@{user.username}" if user.username else user.full_name
    user_profile = f"<a href='tg://user?id={user.id}'>{username}</a>"
    
    try:
        sent_msg = await bot.send_message(
            chat_id=GROUP_ID,
            text=f"{text}\n\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_profile}",
            parse_mode="HTML"
        )
        message_user_map[sent_msg.message_id] = user.id

        await callback.message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!\n"
                                      "–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()


@router.message(AdminPost.waiting_for_photo_ru, F.photo)
async def process_photo_ru(message: Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    text = user_data.get('text', '')
    
    # GROUP_ID = -4724451433 
    GROUP_ID = -1002524424597 
    user = message.from_user
    username = f"@{user.username}" if user.username else user.full_name
    user_profile = f"<a href='tg://user?id={user.id}'>{username}</a>"
    photo = message.photo[-1] 
    
    try:
        sent_msg = await bot.send_photo(
            chat_id=GROUP_ID,
            photo=photo.file_id,
            caption=f"{text}\n\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_profile}",
            parse_mode="HTML"
        )
        message_user_map[sent_msg.message_id] = user.id

        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!\n"
                             "–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()

@router.message(F.reply_to_message)
async def handle_reply_ru(message: Message, bot: Bot):
    original_msg_id = message.reply_to_message.message_id
    user_id = message_user_map.get(original_msg_id)

    if user_id:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}"
            )
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
    else:
        await message.reply("‚ö†Ô∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(lambda c: c.data == "diagnostika_ru")
async def diagnostika_ru(callback: CallbackQuery, state: FSMContext):
    diagnostika = await sync_to_async(list)(Doctor.objects.filter(is_active=True, status="diagnostika"))
    await callback.answer()
    
    if diagnostika:
        buttons = [
            [InlineKeyboardButton(text=f"üë®‚Äç‚öïÔ∏è {doctor.name} {doctor.pozitsion}", url=f"https://t.me/{doctor.telegram}")]
            for doctor in diagnostika
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:", reply_markup=keyboard)
    else:
        await callback.message.answer("""
                                     –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥.
                                     """)
        await callback.answer()

@router.callback_query(lambda c: c.data == "maslahat_ru")
async def maslahat_ru(callback: CallbackQuery, state: FSMContext):
    diagnostika = await sync_to_async(list)(Doctor.objects.filter(is_active=True, status="doctor"))
    await callback.answer()
    
    if diagnostika:
        buttons = [
            [InlineKeyboardButton(text=f"üë®‚Äç‚öïÔ∏è {doctor.name} {doctor.pozitsion}", url=f"https://t.me/{doctor.telegram}")]
            for doctor in diagnostika
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:", reply_markup=keyboard)
    else:
        await callback.message.answer("""
                                     –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π.
                                     """)
        await callback.answer()


@router.callback_query(lambda c: c.data == "other_ru")
async def other_ru(callback: CallbackQuery):
    await callback.message.answer(
        text=(
            "‚ùì <b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?</b>\n"
            "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: <b>(78) 298-00-88</b>\n"
            "üì± –ò–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä: <b>1080</b>"
        ),
        parse_mode="HTML"
    )
    await callback.answer()
